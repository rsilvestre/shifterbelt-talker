{"version":3,"sources":["../../../src/lib/exchange/ExchangeService.es6"],"names":[],"mappings":"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","file":"ExchangeService.js","sourcesContent":["/**\n * Created by michaelsilvestre on 14/06/15\n */\n\nimport events from \"events\"\nimport Exchanger from './Exchanger'\n\nclass ArrayKniffe extends Array {\n  constructor() {\n    super();\n  }\n\n  /**\n   * check if an element exists in array using a comparer function\n   * comparer : function(currentElement)\n   *\n   * @param comparer\n   * @returns {boolean}\n   */\n  inArray(comparer) {\n    for (var i = 0; i < this.length; i++) {\n      if (comparer(this[i])) return true;\n    }\n    return false;\n  }\n\n  /**\n   * adds an element to the array if it does not already exist using a comparer\n   *\n   * @param element\n   * @param comparer\n   */\n  pushIfNotExist(element, comparer) {\n    if (!this.inArray(comparer)) {\n      this.push(element);\n    }\n  }\n\n}\n\nexport default class ExchangeService extends Exchanger {\n  constructor(Exchange, messageOut, messageIn, options) {\n    super(new events.EventEmitter(), new events.EventEmitter(), options);\n    this._messageOutTmp = messageOut;\n    this._messageInTmp = messageIn;\n    this._Exchange = Exchange;\n    return this.init();\n  }\n\n  init() {\n    this._messageInTmp.on('device_connect', (deviceId)=> {\n      let deviceList = new ArrayKniffe();\n\n      let localMessageOut = new events.EventEmitter();\n      let localMessageIn = new events.EventEmitter();\n\n      let cleanEvent = () => {\n        this._messageInTmp.removeAllListeners('device_connect');\n        deviceList.forEach((id) => {\n          localMessageIn.removeAllListeners(id);\n        });\n        localMessageOut.removeAllListeners('send');\n        this._messageInTmp.removeAllListeners('device_disconnect');\n        this._messageInTmp.removeAllListeners('device_connect');\n        //localMessageIn = null;\n        //localMessageOut = null;\n      };\n\n      this._messageInTmp.on(deviceId, (message) => {\n        deviceList.pushIfNotExist(deviceId);\n        localMessageIn.emit(message.key, message.value);\n      });\n\n      localMessageOut.on('send', (message) => {\n        this._messageOutTmp.emit('send', deviceId, message);\n      });\n\n      let exchange = new this._Exchange(localMessageOut, localMessageIn, {\n        deviceId: deviceId,\n        role: this.role\n      });\n\n      this._messageIn.emit('connect', exchange);\n\n      exchange.isConnected = true;\n\n      this._messageInTmp.on('device_disconnect', (deviceId) => {\n        //cleanEvent();\n        localMessageIn.emit('disconnect');\n        exchange = null;\n      });\n\n      this._messageInTmp.on('disconnect', (deviceId) => {\n        localMessageIn.emit('disconnect');\n        //cleanEvent();\n      });\n    });\n  }\n\n  /**\n   *\n   * @param {String} event\n   * @param {Function} callback\n   */\n  on(event, callback) {\n    this._messageIn.addListener(event, callback);\n  }\n\n  /**\n   *\n   * @param {String} event\n   * @param {Arguments} args\n   */\n  emit(event, ...args) {\n    if (!this.isConnected) {\n      return;\n    }\n\n    let { message: message, callback: callback } = super.emit(...args);\n\n    this._messageOut.emit('send', JSON.stringify({ key: event, value: message }));\n\n    if (callback) {\n      callback();\n    }\n  }\n}\n\n"]}